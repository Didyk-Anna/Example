import streamlit as st
import pandas as pd
from prophet import Prophet
from prophet.diagnostics import performance_metrics
from prophet.diagnostics import cross_validation
from prophet.plot import plot_cross_validation_metric
from prophet.plot import plot_plotly, plot_components_plotly
from prophet.plot import add_changepoints_to_plot
from prophet.plot import plot_yearly
import base64

st.title('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤')

"""
### –ö—Ä–æ–∫ 1: –Ü–º–ø–æ—Ä—Ç –Ω–∞–±–æ—Ä—É –¥–∞–Ω–∏—Ö
"""
df = st.file_uploader('–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à –Ω–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö —Ç—É—Ç. –î–∞—Ç–∞—Å–µ—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –¥–∞—Ç—É –∑–∞–ø–∏—Å—ñ–≤ —ñ –±–∞–∂–∞–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫. –ö–æ–ª–æ–Ω–∫–∞ –∑ –¥–∞—Ç–æ—é –ø–æ–≤–∏–Ω–Ω–∞ –º–∞—Ç–∏ –Ω–∞–∑–≤—É "ds" —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É: –†–†–†–†-–ú–ú-–î–î (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2019-05-20). –ö–æ–ª–æ–Ω–∫–∞ –∑ –ø–æ–∫–∞–∑–Ω–∏–∫–æ–º –ø–æ–≤–∏–Ω–Ω–∞ –Ω–∞–∑–∏–≤–∞—Ç–∏—Å—è "y" —ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏. –î–æ–ø—É—Å—Ç–∏–º–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É: csv.', type='csv')

st.info(
            f"""
                üëÜ –ó–∞–≤–∞–Ω—Ç–∞–∂—É–π —Ñ–∞–π–ª csv. [–ü—Ä–∏–∫–ª–∞–¥](https://raw.githubusercontent.com/BohdanTarchanin/healthcare-metrics-prediction/master/example_pedestrians_covid.csv)
                """
        )

if df is not None:
    data = pd.read_csv(df)
    data['ds'] = pd.to_datetime(data['ds'], errors='coerce') 
    st.write(data)
    
    max_date = data['ds'].max()
    st.write(max_date)
    st.success('–¶–µ –æ—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞ —É –≤–∞—à–æ–º—É –Ω–∞–±–æ—Ä—ñ –¥–∞–Ω–∏—Ö')

"""
### –ö—Ä–æ–∫ 2: –í–∫–∞–∑—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É
"""

periods_input = st.number_input('–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± –ø—Ä–æ–≥–Ω–æ–∑? –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 365 —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter.',
min_value=1, max_value=365)

if df is not None and periods_input > 0:
    m = Prophet()
    m.fit(data)

    """
    ### –ö—Ä–æ–∫ 3: –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    """
    future = m.make_future_dataframe(periods=periods_input)
    forecast = m.predict(future)
    fcst = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]
    fcst_filtered = fcst[fcst['ds'] > max_date]    
    st.write(fcst_filtered)
    
    fig1 = m.plot(forecast)
    st.write(fig1)

    fig2 = m.plot_components(forecast)
    st.write(fig2)
        
    fig3 = plot_plotly(m, forecast)
    st.write(fig3)

    fig4 = plot_components_plotly(m, forecast)
    st.write(fig4)

"""
### –ö—Ä–æ–∫ 4: –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑
"""
if df is not None:
    csv_exp = fcst_filtered.to_csv(index=False)
    b64 = base64.b64encode(csv_exp.encode()).decode()  # –ö–æ–¥—É–≤–∞–Ω–Ω—è CSV
    st.download_button(label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", data=csv_exp, file_name='forecast.csv', mime='text/csv')
